{"version":3,"sources":["webpack:///./src/js/sos-data-access.js","webpack:///./src/js/widget/table.js"],"names":["propertyNames","waitingDescribeResponse","propertyCallbackQueue","parse","observations","length","redraw","data","addObservation","property","observation","foi","featureOfInterest","push","time","Date","resultTime","value","Object","prototype","hasOwnProperty","call","result","feature","name","identifier","uom","values","forEach","procedure","id","callback","context","observableProperty","describeSensor","description","properties","ProcessModel","outputs","OutputList","output","System","Array","types","names","type","definition","elem","shift","undefined","errorHandler","setUrl","config","service","read","offering","features","time_start","time_end","getFeatures","JSON","getProperties","getObservation","template","join","inputs","concat","optional_inputs","preferredSizes","w","h","el","innerHTML","querySelector","title","table","init","measures","keys","i","measure","getTime","html","sortedNames","sort","times","reverse","display","parseInt","j","createTable"],"mappings":"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","file":"widget-table-js.chunk.js","sourcesContent":["/* eslint-disable no-nested-ternary, camelcase */\nimport SOS, { isArray } from './SOS';\n\nconst propertyNames = {};\nconst waitingDescribeResponse = {};\nconst propertyCallbackQueue = {};\n\nexport default (config, redraw, errorHandler) => {\n  SOS.setUrl(config.service);\n\n  function getPropertyName(procedure, id, callback, context) {\n    if (!propertyNames[procedure]) {\n      // Queue callback call\n      if (!propertyCallbackQueue[procedure]) {\n        propertyCallbackQueue[procedure] = [];\n      }\n\n      propertyCallbackQueue[procedure].push({\n        callback,\n        id,\n        context,\n      });\n\n      if (!waitingDescribeResponse[procedure]) {\n        waitingDescribeResponse[procedure] = true;\n        // Trigger a DescribeSensor, cache all property names for this procedure\n        SOS.describeSensor(procedure, (description) => {\n          let properties = Object.prototype.hasOwnProperty.call(description, 'ProcessModel')\n            ? description.ProcessModel.outputs.OutputList.output\n            : description.System.outputs.OutputList.output;\n          properties = properties instanceof Array ? properties : [properties];\n          const types = ['Quantity', 'Count', 'Boolean', 'Category', 'Text', 'ObservableProperty'];\n\n          const names = [];\n          Object.values(properties).forEach((property) => {\n            Object.values(types).forEach((type) => {\n              if (Object.prototype.hasOwnProperty.call(property, type)) {\n                // eslint-disable-next-line no-param-reassign\n                property.id = property[type].definition;\n              }\n            });\n            names[property.id] = property.name;\n          });\n          propertyNames[procedure] = names;\n\n          // Clear propertyCallbackQueue\n          while (propertyCallbackQueue[procedure].length) {\n            const elem = propertyCallbackQueue[procedure].shift();\n            elem.callback.call(undefined, propertyNames[procedure][elem.id], elem.context);\n          }\n        }, errorHandler);\n      }\n    } else {\n      callback(propertyNames[procedure][id], context);\n    }\n  }\n\n  function parse(observations) {\n    if (!observations.length) {\n      redraw([]);\n    }\n\n    // Get tabular data from observations\n    const data = [];\n\n    function addObservation(property, observation) {\n      const foi = observation.featureOfInterest;\n      data.push({\n        time: new Date(observation.resultTime),\n        value: Object.prototype.hasOwnProperty.call(observation.result, 'value') ? observation.result.value : observation.result,\n        feature: foi.name ? foi.name.value : (foi.identifier ? foi.identifier.value : foi),\n        property,\n        uom: Object.prototype.hasOwnProperty.call(observation.result, 'uom') ? observation.result.uom : '(N/A)',\n      });\n      if (data.length === observations.length) {\n        redraw(data);\n      }\n    }\n    Object.values(observations).forEach((observation) => {\n      getPropertyName(observation.procedure, observation.observableProperty,\n        addObservation, observation);\n    });\n  }\n\n  function read() {\n    const {\n      offering, feature, property, features, properties, time_start, time_end,\n    } = config;\n    const getFeatures = feature\n      ? [feature]\n      : isArray(features)\n        ? features\n        : features\n          ? JSON.parse(features)\n          : undefined;\n    const getProperties = property\n      ? [property]\n      : isArray(properties)\n        ? properties\n        : properties\n          ? JSON.parse(properties)\n          : undefined;\n    const time = (time_start && time_end) ? [time_start, time_end] : 'latest';\n    SOS.getObservation(offering, getFeatures, getProperties, time, parse, errorHandler);\n  }\n\n  return {\n    read,\n  };\n};\n","/* eslint-disable no-param-reassign */\nimport dataAccess from '../sos-data-access';\nimport ld from '../locale-date';\nimport common from '../widget-common';\n\nconst template = [\n  '<div class=\"table widget\">',\n  '<h3></h3>',\n  '<div class=\"table-responsive\"></div>',\n  '<div><span class=\"footnote\"></span></div>',\n  '</div>',\n].join('');\n\nexport default {\n  inputs: common.inputs.concat(['feature', 'properties', 'time_start', 'time_end', 'title']),\n  optional_inputs: common.optional_inputs,\n  preferredSizes: [{ w: 400, h: 400 }],\n\n  init(config, el, errorHandler) {\n    // Render template\n    el.innerHTML = template;\n    el.querySelector('h3').innerHTML = config.title;\n    const table = el.querySelector('.table-responsive');\n\n    // load widget common features\n    common.init(config, el);\n\n    // Update view\n    function createTable(measures, properties) {\n      let html = '<table class=\"table table-striped table-condensed table-hover table-bordered\">';\n      html += '<thead>';\n      html += '<tr>';\n      html += '<th>Result Time</th>';\n\n      const sortedNames = Object.keys(properties).sort();\n      Object.keys(sortedNames).forEach((i) => {\n        const name = sortedNames[i];\n        const { uom } = properties[name];\n        html += `<th>${name} (${uom})</th>`;\n      });\n      html += '</tr>';\n      html += '</thead>';\n\n      const times = Object.keys(measures);\n      times.sort().reverse();\n      Object.keys(times).forEach((i) => {\n        const time = times[i];\n        const values = measures[time];\n        html += '<tr>';\n        html += `<th class=\"time\">${ld.display(new Date(parseInt(time, 10)))}</th>`;\n        Object.keys(sortedNames).forEach((j) => {\n          html += `<td>${values[sortedNames[j]]}</td>`;\n        });\n        html += '</tr>';\n      });\n      html += '</table>';\n      table.innerHTML = html;\n    }\n\n    function redraw(data) {\n      // Get tabular data from observations\n      const measures = {};\n      const properties = {};\n      Object.keys(data).forEach((i) => {\n        const measure = data[i];\n\n        // Add value in a time-indexed \"measures\" object\n        const time = measure.time.getTime();\n        if (!measures[time]) {\n          measures[time] = {};\n        }\n        measures[time][measure.property] = measure.value;\n\n        // Add property to a \"properties\" object, including uom\n        if (!properties[measure.property]) {\n          properties[measure.property] = {\n            name: measure.property,\n            uom: measure.uom,\n          };\n        }\n      });\n\n      createTable(measures, properties);\n    }\n\n    // Setup SOS data access\n    const data = dataAccess(config, redraw, errorHandler);\n    data.read();\n  },\n};\n"],"sourceRoot":""}