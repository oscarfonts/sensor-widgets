{"version":3,"sources":["webpack:///./src/js/widget/map.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACwB;AAC2C;AACT;AACI;;AAEnB;AAChB;AACF;AACS;AACI;AACtC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO,8CAAC;AACR,8CAAC;AACD,EAAE,6FAAa;AACf,EAAE,oFAAO;AACT,EAAE,wFAAS;AACX,CAAC;;AAEc;AACf,UAAU,sDAAM;AAChB,iIAAiI,sDAAM;AACvI,oBAAoB,iBAAiB;;AAErC;AACA,mBAAmB,6CAAI;AACvB;AACA,IAAI,sDAAM;;AAEV;AACA;AACA;AACA;AACA;AACA,oBAAoB,8CAAC;AACrB,OAAO;AACP;AACA,oBAAoB,8CAAC;AACrB;AACA,KAAK;AACL;AACA,kBAAkB,8CAAC,oBAAoB,EAAE,kCAAkC,EAAE,EAAE,EAAE,EAAE,EAAE;AACrF,4BAA4B,0EAA0E;AACtG;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA,gDAAgD,gBAAgB;AAChE;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,qBAAqB;AAC1C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAM,4CAAG;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB,8CAAC;AACvB;AACA,WAAW;;AAEX;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA,0BAA0B,8CAAC;AAC3B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA,6CAA6C,aAAa;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA,oBAAoB,qDAAY;AAChC;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,yDAAyD,WAAW,GAAG,SAAS,WAAW,GAAG;AAC9F,kBAAkB,6DAAY;AAC9B,iBAAiB;AACjB;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA,YAAY,4CAAG;AACf;AACA,SAAS;AACT,OAAO;AACP;;AAEA,IAAI,4CAAG;AACP;AACA,GAAG;AACH,CAAC,EAAC","file":"widget-map-js.chunk.js","sourcesContent":["/* eslint-disable no-param-reassign */\nimport L from 'leaflet';\nimport iconRetinaUrl from 'leaflet/dist/images/marker-icon-2x.png';\nimport iconUrl from 'leaflet/dist/images/marker-icon.png';\nimport shadowUrl from 'leaflet/dist/images/marker-shadow.png';\n\nimport SensorWidget from '../SensorWidget';\nimport i18n from '../i18n';\nimport SOS from '../SOS';\nimport 'leaflet/dist/leaflet.css';\nimport common from '../widget-common';\n// import 'leaflet.markercluster';\n\n// TODO readd tooltips\n// TODO readd clustering\n// TODO readd popups\n\n// Overriding Leaflet.label so it accepts a DOM element as argument\n// (not only a string). Needed for async loading of content to label\n/*\nL.Label.prototype._updateContent = function() {\n    if (!this._content || !this._map || this._prevContent === this._content) {\n        return;\n    }\n\n    if (typeof this._content === 'string') {\n        this._container.innerHTML = this._content;\n    } else {\n        while (this._container.hasChildNodes()) {\n            this._container.removeChild(this._container.firstChild);\n        }\n        this._container.appendChild(this._content);\n    }\n    this._prevContent = this._content;\n    this._labelWidth = this._container.offsetWidth;\n};\n*/\n\n// Ugly hack to import icons with Webpack\n// eslint-disable-next-line no-underscore-dangle\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl,\n  iconUrl,\n  shadowUrl,\n});\n\nexport default {\n  inputs: common.inputs.concat(['features', 'properties']),\n  optional_inputs: ['permanent_tooltips', 'popup_widget', 'no_clustering', 'swap_axis', 'max_initial_zoom', 'base_layer'].concat(common.optional_inputs),\n  preferredSizes: [{ w: 550, h: 400 }],\n\n  init(config, el, errorHandler) {\n    el.innerHTML = i18n.t('Loading...');\n    // load widget common features\n    common.init(config, el);\n\n    let baseLayer;\n    if (config.base_layer) {\n      const params = (typeof config.base_layer === 'string' || config.base_layer instanceof String) ? JSON.parse(config.base_layer) : config.base_layer;\n      if (params.type && params.type.toUpperCase() === 'WMS') {\n        // WMS Layer\n        baseLayer = L.tileLayer.wms(params.url, params.options);\n      } else {\n        // XYZ TileLayer\n        baseLayer = L.tileLayer(params.url, params.options);\n      }\n    } else {\n      // A default base layer, taken from http://leaflet-extras.github.io/leaflet-providers/preview/\n      baseLayer = L.tileLayer('http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png', {\n        attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a> &copy; <a href=\"http://cartodb.com/attributions\">CartoDB</a>',\n        subdomains: 'abcd',\n        maxZoom: 19,\n      });\n    }\n\n    // Add footnote to attribution string\n    if (config.footnote) {\n      baseLayer.options.attribution += ` | <b>${config.footnote}</b>`;\n    }\n\n    // Parse popup configuration\n    if (typeof config.popup_widget === 'string' || config.popup_widget instanceof String) {\n      config.popup_widget = JSON.parse(config.popup_widget);\n    }\n\n    function isArray(obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    }\n\n    function isInArray(value, array) {\n      return array.indexOf(value) > -1;\n    }\n\n    function swapAxis(geometry) {\n      const ret = [];\n      for (let i = 0; i < geometry.length; i += 1) {\n        if (isArray(geometry[i])) {\n          ret[i] = swapAxis(geometry[i]);\n        } else if (!i % 2) {\n          ret[i] = geometry[i + 1];\n          ret[i + 1] = geometry[i];\n        }\n      }\n      return ret;\n    }\n\n    function fois2geojson(fois) {\n      const configFeatures = isArray(config.features)\n        ? config.features\n        : JSON.parse(config.features);\n      const features = [];\n      Object.keys(fois).forEach((i) => {\n        const foi = fois[i];\n        if (foi.geometry\n          && (!configFeatures.length || isInArray(foi.identifier.value, config.features))\n        ) {\n          if (config.swap_axis) {\n            foi.geometry.coordinates = swapAxis(foi.geometry.coordinates);\n          }\n          const feature = {\n            type: 'Feature',\n            geometry: foi.geometry,\n            id: foi.identifier.value,\n            properties: {\n              name: foi.name ? foi.name.value : foi.identifier.value,\n            },\n          };\n          features.push(feature);\n        }\n      });\n      return {\n        type: 'FeatureCollection',\n        features,\n      };\n    }\n\n    function read() {\n      SOS.getCapabilities((offerings) => {\n        function addFoIs(features) {\n          // Map div\n          el.innerHTML = '';\n          const mapDiv = document.createElement('div');\n          mapDiv.className = 'map widget';\n          el.appendChild(mapDiv);\n\n          const map = L.map(mapDiv, {\n            layers: [baseLayer],\n          }).setView([0, 0], 2);\n\n          // Clustering\n          // var featureContainer;\n          // if (config.no_clustering) {\n          //    featureContainer = map;\n          // } else {\n          //   featureContainer = L.markerClusterGroup({\n          //        showCoverageOnHover: false,\n          //        maxClusterRadius: 50\n          //    });\n          //    map.addLayer(featureContainer);\n          // }\n\n          const geojson = L.geoJson(fois2geojson(features), {\n            onEachFeature(feature, layer) {\n              // OnClick event\n              if (config.on_click) {\n                layer.on('click', (e) => {\n                  config.on_click(e.target);\n                });\n              }\n\n              // Tooltip (label)\n              /*\n              var labelElement = document.createElement('div');\n              labelElement.id = 'map-tooltip-' + feature.id;\n              labelElement.appendChild(document.createTextNode(feature.properties.name));\n              layer.bindLabel(labelElement, {noHide: true}).addTo(featureContainer);\n              if (config.properties && config.properties != \"[]\" && config.properties.length) {\n                  new SensorWidget('panel', {\n                      \"service\": config.service,\n                      \"offering\": config.offering,\n                      \"feature\": feature.id,\n                      \"properties\": config.properties,\n                      \"refresh_interval\": \"60\",\n                      \"title\": feature.properties.name\n                  }, labelElement);\n              }\n              if (!config.permanent_tooltips && layer.setLabelNoHide) {\n                  layer.setLabelNoHide(false);\n              }\n              */\n\n              // Info bubble (popup)\n              if (config.popup_widget) {\n                const elPopup = document.createElement('div');\n                const widgetConfig = JSON.parse(JSON.stringify(config.popup_widget));\n                const { name } = widgetConfig;\n                delete widgetConfig.name;\n                widgetConfig.service = config.service;\n                widgetConfig.offering = config.offering;\n                new SensorWidget(name).inspect((inputs, optionals, sizes) => {\n                  if (inputs.indexOf('feature') !== -1) {\n                    widgetConfig.feature = feature.id;\n                  } else if (inputs.indexOf('features') !== -1) {\n                    widgetConfig.features = [feature.id];\n                  }\n                  layer.bindPopup(elPopup, {\n                    minWidth: sizes[0].w,\n                    minHeight: sizes[0].h,\n                  });\n                  elPopup.setAttribute('style', `width:${sizes[0].w}px;height:${sizes[0].h}px;`);\n                  SensorWidget(name, widgetConfig, elPopup);\n                });\n              }\n            },\n          });\n          map.addLayer(geojson);\n          map.fitBounds(geojson.getBounds(), {\n            maxZoom: config.max_initial_zoom ? parseInt(config.max_initial_zoom, 10) : 14,\n          });\n        }\n\n        Object.keys(offerings).forEach((i) => {\n          const offering = offerings[i];\n          if (offering.identifier === config.offering) {\n            SOS.getFeatureOfInterest(offering.procedure[0], addFoIs, errorHandler);\n          }\n        });\n      }, errorHandler);\n    }\n\n    SOS.setUrl(config.service);\n    read();\n  },\n};\n"],"sourceRoot":""}