{"version":3,"sources":["webpack:///./src/js/widget/map.js"],"names":["Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","inputs","concat","optional_inputs","preferredSizes","w","h","config","el","errorHandler","baseLayer","innerHTML","t","init","base_layer","params","String","JSON","parse","type","toUpperCase","tileLayer","wms","url","options","attribution","subdomains","maxZoom","isArray","obj","Object","toString","call","fois2geojson","fois","configFeatures","features","keys","forEach","i","foi","geometry","length","value","identifier","indexOf","swap_axis","coordinates","swapAxis","ret","feature","id","properties","name","push","footnote","popup_widget","setUrl","service","getCapabilities","offerings","addFoIs","mapDiv","document","createElement","className","appendChild","map","layers","setView","geojson","geoJson","layer","on_click","on","e","target","elPopup","widgetConfig","stringify","offering","inspect","optionals","sizes","bindPopup","minWidth","minHeight","setAttribute","addLayer","fitBounds","getBounds","max_initial_zoom","parseInt","getFeatureOfInterest","procedure"],"mappings":"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","file":"widget-map-js.chunk.js","sourcesContent":["/* eslint-disable no-param-reassign */\nimport L from 'leaflet';\nimport iconRetinaUrl from 'leaflet/dist/images/marker-icon-2x.png';\nimport iconUrl from 'leaflet/dist/images/marker-icon.png';\nimport shadowUrl from 'leaflet/dist/images/marker-shadow.png';\n\nimport SensorWidget from '../SensorWidget';\nimport i18n from '../i18n';\nimport SOS from '../SOS';\nimport 'leaflet/dist/leaflet.css';\nimport common from '../widget-common';\n// import 'leaflet.markercluster';\n\n// TODO readd tooltips\n// TODO readd clustering\n// TODO readd popups\n\n// Overriding Leaflet.label so it accepts a DOM element as argument\n// (not only a string). Needed for async loading of content to label\n/*\nL.Label.prototype._updateContent = function() {\n    if (!this._content || !this._map || this._prevContent === this._content) {\n        return;\n    }\n\n    if (typeof this._content === 'string') {\n        this._container.innerHTML = this._content;\n    } else {\n        while (this._container.hasChildNodes()) {\n            this._container.removeChild(this._container.firstChild);\n        }\n        this._container.appendChild(this._content);\n    }\n    this._prevContent = this._content;\n    this._labelWidth = this._container.offsetWidth;\n};\n*/\n\n// Ugly hack to import icons with Webpack\n// eslint-disable-next-line no-underscore-dangle\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl,\n  iconUrl,\n  shadowUrl,\n});\n\nexport default {\n  inputs: common.inputs.concat(['features', 'properties']),\n  optional_inputs: ['permanent_tooltips', 'popup_widget', 'no_clustering', 'swap_axis', 'max_initial_zoom', 'base_layer'].concat(common.optional_inputs),\n  preferredSizes: [{ w: 550, h: 400 }],\n\n  init(config, el, errorHandler) {\n    el.innerHTML = i18n.t('Loading...');\n    // load widget common features\n    common.init(config, el);\n\n    let baseLayer;\n    if (config.base_layer) {\n      const params = (typeof config.base_layer === 'string' || config.base_layer instanceof String) ? JSON.parse(config.base_layer) : config.base_layer;\n      if (params.type && params.type.toUpperCase() === 'WMS') {\n        // WMS Layer\n        baseLayer = L.tileLayer.wms(params.url, params.options);\n      } else {\n        // XYZ TileLayer\n        baseLayer = L.tileLayer(params.url, params.options);\n      }\n    } else {\n      // A default base layer, taken from http://leaflet-extras.github.io/leaflet-providers/preview/\n      baseLayer = L.tileLayer('http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png', {\n        attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a> &copy; <a href=\"http://cartodb.com/attributions\">CartoDB</a>',\n        subdomains: 'abcd',\n        maxZoom: 19,\n      });\n    }\n\n    // Add footnote to attribution string\n    if (config.footnote) {\n      baseLayer.options.attribution += ` | <b>${config.footnote}</b>`;\n    }\n\n    // Parse popup configuration\n    if (typeof config.popup_widget === 'string' || config.popup_widget instanceof String) {\n      config.popup_widget = JSON.parse(config.popup_widget);\n    }\n\n    function isArray(obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    }\n\n    function isInArray(value, array) {\n      return array.indexOf(value) > -1;\n    }\n\n    function swapAxis(geometry) {\n      const ret = [];\n      for (let i = 0; i < geometry.length; i += 1) {\n        if (isArray(geometry[i])) {\n          ret[i] = swapAxis(geometry[i]);\n        } else if (!i % 2) {\n          ret[i] = geometry[i + 1];\n          ret[i + 1] = geometry[i];\n        }\n      }\n      return ret;\n    }\n\n    function fois2geojson(fois) {\n      const configFeatures = isArray(config.features)\n        ? config.features\n        : JSON.parse(config.features);\n      const features = [];\n      Object.keys(fois).forEach((i) => {\n        const foi = fois[i];\n        if (foi.geometry\n          && (!configFeatures.length || isInArray(foi.identifier.value, config.features))\n        ) {\n          if (config.swap_axis) {\n            foi.geometry.coordinates = swapAxis(foi.geometry.coordinates);\n          }\n          const feature = {\n            type: 'Feature',\n            geometry: foi.geometry,\n            id: foi.identifier.value,\n            properties: {\n              name: foi.name ? foi.name.value : foi.identifier.value,\n            },\n          };\n          features.push(feature);\n        }\n      });\n      return {\n        type: 'FeatureCollection',\n        features,\n      };\n    }\n\n    function read() {\n      SOS.getCapabilities((offerings) => {\n        function addFoIs(features) {\n          // Map div\n          el.innerHTML = '';\n          const mapDiv = document.createElement('div');\n          mapDiv.className = 'map widget';\n          el.appendChild(mapDiv);\n\n          const map = L.map(mapDiv, {\n            layers: [baseLayer],\n          }).setView([0, 0], 2);\n\n          // Clustering\n          // var featureContainer;\n          // if (config.no_clustering) {\n          //    featureContainer = map;\n          // } else {\n          //   featureContainer = L.markerClusterGroup({\n          //        showCoverageOnHover: false,\n          //        maxClusterRadius: 50\n          //    });\n          //    map.addLayer(featureContainer);\n          // }\n\n          const geojson = L.geoJson(fois2geojson(features), {\n            onEachFeature(feature, layer) {\n              // OnClick event\n              if (config.on_click) {\n                layer.on('click', (e) => {\n                  config.on_click(e.target);\n                });\n              }\n\n              // Tooltip (label)\n              /*\n              var labelElement = document.createElement('div');\n              labelElement.id = 'map-tooltip-' + feature.id;\n              labelElement.appendChild(document.createTextNode(feature.properties.name));\n              layer.bindLabel(labelElement, {noHide: true}).addTo(featureContainer);\n              if (config.properties && config.properties != \"[]\" && config.properties.length) {\n                  new SensorWidget('panel', {\n                      \"service\": config.service,\n                      \"offering\": config.offering,\n                      \"feature\": feature.id,\n                      \"properties\": config.properties,\n                      \"refresh_interval\": \"60\",\n                      \"title\": feature.properties.name\n                  }, labelElement);\n              }\n              if (!config.permanent_tooltips && layer.setLabelNoHide) {\n                  layer.setLabelNoHide(false);\n              }\n              */\n\n              // Info bubble (popup)\n              if (config.popup_widget) {\n                const elPopup = document.createElement('div');\n                const widgetConfig = JSON.parse(JSON.stringify(config.popup_widget));\n                const { name } = widgetConfig;\n                delete widgetConfig.name;\n                widgetConfig.service = config.service;\n                widgetConfig.offering = config.offering;\n                new SensorWidget(name).inspect((inputs, optionals, sizes) => {\n                  if (inputs.indexOf('feature') !== -1) {\n                    widgetConfig.feature = feature.id;\n                  } else if (inputs.indexOf('features') !== -1) {\n                    widgetConfig.features = [feature.id];\n                  }\n                  layer.bindPopup(elPopup, {\n                    minWidth: sizes[0].w,\n                    minHeight: sizes[0].h,\n                  });\n                  elPopup.setAttribute('style', `width:${sizes[0].w}px;height:${sizes[0].h}px;`);\n                  SensorWidget(name, widgetConfig, elPopup);\n                });\n              }\n            },\n          });\n          map.addLayer(geojson);\n          map.fitBounds(geojson.getBounds(), {\n            maxZoom: config.max_initial_zoom ? parseInt(config.max_initial_zoom, 10) : 14,\n          });\n        }\n\n        Object.keys(offerings).forEach((i) => {\n          const offering = offerings[i];\n          if (offering.identifier === config.offering) {\n            SOS.getFeatureOfInterest(offering.procedure[0], addFoIs, errorHandler);\n          }\n        });\n      }, errorHandler);\n    }\n\n    SOS.setUrl(config.service);\n    read();\n  },\n};\n"],"sourceRoot":""}