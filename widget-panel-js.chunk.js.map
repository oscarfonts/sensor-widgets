{"version":3,"sources":["webpack:///./src/js/sos-data-access.js","webpack:///./src/js/widget/panel.js"],"names":["propertyNames","waitingDescribeResponse","propertyCallbackQueue","parse","observations","length","redraw","data","addObservation","property","observation","foi","featureOfInterest","push","time","Date","resultTime","value","Object","prototype","hasOwnProperty","call","result","feature","name","identifier","uom","values","forEach","procedure","id","callback","context","observableProperty","describeSensor","description","properties","ProcessModel","outputs","OutputList","output","System","Array","types","names","type","definition","elem","shift","undefined","errorHandler","setUrl","config","service","read","offering","features","time_start","time_end","getFeatures","JSON","getProperties","getObservation","template","t","join","inputs","concat","optional_inputs","preferredSizes","w","h","el","innerHTML","title","querySelector","subtitle","panel","init","mostRecentTime","Math","max","map","o","sort","a","b","localeCompare","display","html","keys","i","measure","getTime","refreshIntervalId","setInterval","refresh_interval","clearInterval"],"mappings":"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","file":"widget-panel-js.chunk.js","sourcesContent":["/* eslint-disable no-nested-ternary, camelcase */\nimport SOS, { isArray } from './SOS';\n\nconst propertyNames = {};\nconst waitingDescribeResponse = {};\nconst propertyCallbackQueue = {};\n\nexport default (config, redraw, errorHandler) => {\n  SOS.setUrl(config.service);\n\n  function getPropertyName(procedure, id, callback, context) {\n    if (!propertyNames[procedure]) {\n      // Queue callback call\n      if (!propertyCallbackQueue[procedure]) {\n        propertyCallbackQueue[procedure] = [];\n      }\n\n      propertyCallbackQueue[procedure].push({\n        callback,\n        id,\n        context,\n      });\n\n      if (!waitingDescribeResponse[procedure]) {\n        waitingDescribeResponse[procedure] = true;\n        // Trigger a DescribeSensor, cache all property names for this procedure\n        SOS.describeSensor(procedure, (description) => {\n          let properties = Object.prototype.hasOwnProperty.call(description, 'ProcessModel')\n            ? description.ProcessModel.outputs.OutputList.output\n            : description.System.outputs.OutputList.output;\n          properties = properties instanceof Array ? properties : [properties];\n          const types = ['Quantity', 'Count', 'Boolean', 'Category', 'Text', 'ObservableProperty'];\n\n          const names = [];\n          Object.values(properties).forEach((property) => {\n            Object.values(types).forEach((type) => {\n              if (Object.prototype.hasOwnProperty.call(property, type)) {\n                // eslint-disable-next-line no-param-reassign\n                property.id = property[type].definition;\n              }\n            });\n            names[property.id] = property.name;\n          });\n          propertyNames[procedure] = names;\n\n          // Clear propertyCallbackQueue\n          while (propertyCallbackQueue[procedure].length) {\n            const elem = propertyCallbackQueue[procedure].shift();\n            elem.callback.call(undefined, propertyNames[procedure][elem.id], elem.context);\n          }\n        }, errorHandler);\n      }\n    } else {\n      callback(propertyNames[procedure][id], context);\n    }\n  }\n\n  function parse(observations) {\n    if (!observations.length) {\n      redraw([]);\n    }\n\n    // Get tabular data from observations\n    const data = [];\n\n    function addObservation(property, observation) {\n      const foi = observation.featureOfInterest;\n      data.push({\n        time: new Date(observation.resultTime),\n        value: Object.prototype.hasOwnProperty.call(observation.result, 'value') ? observation.result.value : observation.result,\n        feature: foi.name ? foi.name.value : (foi.identifier ? foi.identifier.value : foi),\n        property,\n        uom: Object.prototype.hasOwnProperty.call(observation.result, 'uom') ? observation.result.uom : '(N/A)',\n      });\n      if (data.length === observations.length) {\n        redraw(data);\n      }\n    }\n    Object.values(observations).forEach((observation) => {\n      getPropertyName(observation.procedure, observation.observableProperty,\n        addObservation, observation);\n    });\n  }\n\n  function read() {\n    const {\n      offering, feature, property, features, properties, time_start, time_end,\n    } = config;\n    const getFeatures = feature\n      ? [feature]\n      : isArray(features)\n        ? features\n        : features\n          ? JSON.parse(features)\n          : undefined;\n    const getProperties = property\n      ? [property]\n      : isArray(properties)\n        ? properties\n        : properties\n          ? JSON.parse(properties)\n          : undefined;\n    const time = (time_start && time_end) ? [time_start, time_end] : 'latest';\n    SOS.getObservation(offering, getFeatures, getProperties, time, parse, errorHandler);\n  }\n\n  return {\n    read,\n  };\n};\n","/* eslint-disable no-param-reassign */\nimport i18n from '../i18n';\nimport dataAccess from '../sos-data-access';\nimport ld from '../locale-date';\nimport common from '../widget-common';\n\nconst template = [\n  '<div class=\"panel widget\">',\n  '<h2></h2>',\n  '<h3>', i18n.t('Loading...'), '</h3>',\n  '<dl class=\"dl-horizontal\"></dl>',\n  '<div><span class=\"footnote\"></span></div>',\n  '</div>',\n].join('');\n\nexport default {\n  inputs: common.inputs.concat(['feature', 'properties', 'refresh_interval']),\n  optional_inputs: ['title'].concat(common.optional_inputs),\n  preferredSizes: [{ w: 400, h: 400 }],\n\n  init(config, el, errorHandler) {\n    // Render template\n    el.innerHTML = template;\n    const title = el.querySelector('h2');\n    const subtitle = el.querySelector('h3');\n    const panel = el.querySelector('dl');\n\n    // load widget common features\n    common.init(config, el);\n\n    // Update view\n    function redraw(data) {\n      if (!data.length) {\n        title.innerHTML = config.title || '';\n        subtitle.innerHTML = i18n.t('(no data)');\n        return;\n      }\n\n      // Get the most recent measure time as the reference one\n      const mostRecentTime = new Date(Math.max(...data.map((o) => o.time)));\n\n      // Sort by property\n      data.sort((a, b) => a.property.localeCompare(b.property));\n\n      title.innerHTML = config.title || `${i18n.t('Last measures from')} ${data[0].feature}`;\n      subtitle.innerHTML = ld.display(mostRecentTime);\n      let html = '';\n      Object.keys(data).forEach((i) => {\n        const measure = data[i];\n        html += `<dt>${measure.property}</dt>`;\n        if (measure.time.getTime() === mostRecentTime.getTime()) {\n          html += `<dd>${measure.value} ${measure.uom}</dd>`;\n        } else { // Outdated! Display distinctly and with corresponding date\n          html += `<dd class='outdated'>${measure.value} ${measure.uom}* <span>*(${ld.display(measure.time)})</span></dd>`;\n        }\n      });\n      panel.innerHTML = html;\n    }\n\n    // Setup SOS data access\n    const data = dataAccess(config, redraw, errorHandler);\n    const refreshIntervalId = setInterval(data.read, config.refresh_interval * 1000);\n    data.read();\n\n    return {\n      destroy() {\n        clearInterval(refreshIntervalId);\n      },\n    };\n  },\n};\n"],"sourceRoot":""}