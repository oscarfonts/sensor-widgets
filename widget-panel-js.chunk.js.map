{"version":3,"sources":["webpack:///./src/js/sos-data-access.js","webpack:///./src/js/widget/panel.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AACwB;;AAExB;AACA;AACA;;AAEe;AACf,EAAE,4CAAG;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,QAAQ,4CAAG;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,4CAAG;AACP;;AAEA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;ACjHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAC2B;AACiB;AACZ;AACM;;AAEtC;AACA;AACA;AACA,UAAU,6CAAI;AACd;AACA;AACA;AACA;;AAEe;AACf,UAAU,sDAAM;AAChB,oCAAoC,sDAAM;AAC1C,oBAAoB,iBAAiB;;AAErC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,sDAAM;;AAEV;AACA;AACA;AACA;AACA,6BAA6B,6CAAI;AACjC;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,2CAA2C,6CAAI,yBAAyB,GAAG,gBAAgB;AAC3F,2BAA2B,oDAAE;AAC7B;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA,yBAAyB,cAAc,GAAG,YAAY;AACtD,SAAS,OAAO;AAChB,0CAA0C,cAAc,GAAG,YAAY,YAAY,oDAAE,uBAAuB;AAC5G;AACA,OAAO;AACP;AACA;;AAEA;AACA,iBAAiB,gEAAU;AAC3B;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH,CAAC,EAAC","file":"widget-panel-js.chunk.js","sourcesContent":["/* eslint-disable no-nested-ternary, camelcase */\nimport SOS from './SOS';\n\nconst propertyNames = {};\nconst waitingDescribeResponse = {};\nconst propertyCallbackQueue = {};\n\nexport default (config, redraw, errorHandler) => {\n  SOS.setUrl(config.service);\n\n  function isArray(obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n  }\n\n  function getPropertyName(procedure, id, callback, context) {\n    if (!propertyNames[procedure]) {\n      // Queue callback call\n      if (!propertyCallbackQueue[procedure]) {\n        propertyCallbackQueue[procedure] = [];\n      }\n\n      propertyCallbackQueue[procedure].push({\n        callback,\n        id,\n        context,\n      });\n\n      if (!waitingDescribeResponse[procedure]) {\n        waitingDescribeResponse[procedure] = true;\n        // Trigger a DescribeSensor, cache all property names for this procedure\n        SOS.describeSensor(procedure, (description) => {\n          let properties = Object.prototype.hasOwnProperty.call(description, 'ProcessModel')\n            ? description.ProcessModel.outputs.OutputList.output\n            : description.System.outputs.OutputList.output;\n          properties = properties instanceof Array ? properties : [properties];\n          const types = ['Quantity', 'Count', 'Boolean', 'Category', 'Text', 'ObservableProperty'];\n\n          const names = [];\n          Object.values(properties).forEach((property) => {\n            Object.values(types).forEach((type) => {\n              if (Object.prototype.hasOwnProperty.call(property, type)) {\n                // eslint-disable-next-line no-param-reassign\n                property.id = property[type].definition;\n              }\n            });\n            names[property.id] = property.name;\n          });\n          propertyNames[procedure] = names;\n\n          // Clear propertyCallbackQueue\n          while (propertyCallbackQueue[procedure].length) {\n            const elem = propertyCallbackQueue[procedure].shift();\n            elem.callback.call(undefined, propertyNames[procedure][elem.id], elem.context);\n          }\n        }, errorHandler);\n      }\n    } else {\n      callback(propertyNames[procedure][id], context);\n    }\n  }\n\n  function parse(observations) {\n    if (!observations.length) {\n      redraw([]);\n    }\n\n    // Get tabular data from observations\n    const data = [];\n\n    function addObservation(property, observation) {\n      const foi = observation.featureOfInterest;\n      data.push({\n        time: new Date(observation.resultTime),\n        value: Object.prototype.hasOwnProperty.call(observation.result, 'value') ? observation.result.value : observation.result,\n        feature: foi.name ? foi.name.value : (foi.identifier ? foi.identifier.value : foi),\n        property,\n        uom: Object.prototype.hasOwnProperty.call(observation.result, 'uom') ? observation.result.uom : '(N/A)',\n      });\n      if (data.length === observations.length) {\n        redraw(data);\n      }\n    }\n    Object.values(observations).forEach((observation) => {\n      getPropertyName(observation.procedure, observation.observableProperty,\n        addObservation, observation);\n    });\n  }\n\n  function read() {\n    const {\n      offering, feature, property, features, properties, time_start, time_end,\n    } = config;\n    const getFeatures = feature\n      ? [feature]\n      : isArray(features)\n        ? features\n        : features\n          ? JSON.parse(features)\n          : undefined;\n    const getProperties = property\n      ? [property]\n      : isArray(properties)\n        ? properties\n        : properties\n          ? JSON.parse(properties)\n          : undefined;\n    const time = (time_start && time_end) ? [time_start, time_end] : 'latest';\n    SOS.getObservation(offering, getFeatures, getProperties, time, parse, errorHandler);\n  }\n\n  return {\n    read,\n  };\n};\n","/* eslint-disable no-param-reassign */\nimport i18n from '../i18n';\nimport dataAccess from '../sos-data-access';\nimport ld from '../locale-date';\nimport common from '../widget-common';\n\nconst template = [\n  '<div class=\"panel widget\">',\n  '<h2></h2>',\n  '<h3>', i18n.t('Loading...'), '</h3>',\n  '<dl class=\"dl-horizontal\"></dl>',\n  '<div><span class=\"footnote\"></span></div>',\n  '</div>',\n].join('');\n\nexport default {\n  inputs: common.inputs.concat(['feature', 'properties', 'refresh_interval']),\n  optional_inputs: ['title'].concat(common.optional_inputs),\n  preferredSizes: [{ w: 400, h: 400 }],\n\n  init(config, el, errorHandler) {\n    // Render template\n    el.innerHTML = template;\n    const title = el.querySelector('h2');\n    const subtitle = el.querySelector('h3');\n    const panel = el.querySelector('dl');\n\n    // load widget common features\n    common.init(config, el);\n\n    // Update view\n    function redraw(data) {\n      if (!data.length) {\n        title.innerHTML = config.title || '';\n        subtitle.innerHTML = i18n.t('(no data)');\n        return;\n      }\n\n      // Get the most recent measure time as the reference one\n      const mostRecentTime = new Date(Math.max(...data.map((o) => o.time)));\n\n      // Sort by property\n      data.sort((a, b) => a.property.localeCompare(b.property));\n\n      title.innerHTML = config.title || `${i18n.t('Last measures from')} ${data[0].feature}`;\n      subtitle.innerHTML = ld.display(mostRecentTime);\n      let html = '';\n      Object.keys(data).forEach((i) => {\n        const measure = data[i];\n        html += `<dt>${measure.property}</dt>`;\n        if (measure.time.getTime() === mostRecentTime.getTime()) {\n          html += `<dd>${measure.value} ${measure.uom}</dd>`;\n        } else { // Outdated! Display distinctly and with corresponding date\n          html += `<dd class='outdated'>${measure.value} ${measure.uom}* <span>*(${ld.display(measure.time)})</span></dd>`;\n        }\n      });\n      panel.innerHTML = html;\n    }\n\n    // Setup SOS data access\n    const data = dataAccess(config, redraw, errorHandler);\n    const refreshIntervalId = setInterval(data.read, config.refresh_interval * 1000);\n    data.read();\n\n    return {\n      destroy() {\n        clearInterval(refreshIntervalId);\n      },\n    };\n  },\n};\n"],"sourceRoot":""}